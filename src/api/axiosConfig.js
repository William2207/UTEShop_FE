import axios from "axios";

// T·∫°o m·ªôt instance c·ªßa Axios
const api = axios.create({
  baseURL: "http://localhost:5000/api", // Thay b·∫±ng baseURL c·ªßa API
});

// Th√™m m·ªôt request interceptor
api.interceptors.request.use(
  (config) => {
    // L·∫•y token t·ª´ sessionStorage (ƒë·ªìng b·ªô v·ªõi authSlice)
    const token = sessionStorage.getItem("token");

    console.log('üîç Request interceptor - Token:', token ? 'Token exists' : 'No token');

    // N·∫øu token t·ªìn t·∫°i, th√™m n√≥ v√†o header Authorization
    if (token) {
      config.headers["Authorization"] = `Bearer ${token}`;
    }

    return config;
  },
  (error) => {
    // X·ª≠ l√Ω l·ªói request
    return Promise.reject(error);
  }
);

// Th√™m response interceptor ƒë·ªÉ x·ª≠ l√Ω l·ªói token
api.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    console.log('üîç Response interceptor - Error:', error.response?.data);
    
    // N·∫øu token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
    if (error.response?.status === 401 && 
        (error.response?.data?.code === 'TOKEN_EXPIRED' || 
         error.response?.data?.code === 'INVALID_TOKEN' ||
         error.response?.data?.code === 'NO_TOKEN')) {
      
      // X√≥a token kh·ªèi sessionStorage
      sessionStorage.removeItem('token');
      sessionStorage.removeItem('user');
      sessionStorage.removeItem('refreshToken');
      
      // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang login n·∫øu c·∫ßn
      if (window.location.pathname !== '/login') {
        window.location.href = '/login';
      }
    }
    
    return Promise.reject(error);
  }
);

export default api;
