import { useSelector, useDispatch } from 'react-redux';
import { useEffect, useState, useRef } from 'react';
import { useLocation } from 'react-router-dom';
import { fetchCart } from '../features/cart/cartSlice';

export const useCartNotifications = () => {
  const dispatch = useDispatch();
  const { items } = useSelector((state) => state.cart);
  const user = useSelector((state) => state.auth.user);
  const location = useLocation();
  const [badgeCount, setBadgeCount] = useState(0);
  const prevItemsRef = useRef(items);
  const hasFetchedRef = useRef(false);

  // ‚úÖ T√°ch ri√™ng logic fetch cart - ch·ªâ g·ªçi 1 l·∫ßn khi user ƒëƒÉng nh·∫≠p
  useEffect(() => {
    if (user && !hasFetchedRef.current) {
      console.log('üîÑ Fetching cart data for user:', user.email || user.username);
      dispatch(fetchCart());
      hasFetchedRef.current = true;
    }
    
    // Reset flag khi user ƒëƒÉng xu·∫•t
    if (!user) {
      hasFetchedRef.current = false;
      setBadgeCount(0); // Reset badge khi ƒëƒÉng xu·∫•t
    }
  }, [user, dispatch]);

  // ‚úÖ Logic notifications ri√™ng - kh√¥ng g·ªçi API
  useEffect(() => {
    console.log('üîç DEBUG - Items changed:', {
      prevItemsCount: prevItemsRef.current.length,
      currentItemsCount: items.length,
      prevItems: prevItemsRef.current.map(item => ({ 
        id: item.product._id, 
        name: item.product.name,
        qty: item.quantity 
      })),
      currentItems: items.map(item => ({ 
        id: item.product._id, 
        name: item.product.name,
        qty: item.quantity 
      }))
    });

    // Ch·ªâ x·ª≠ l√Ω notifications khi c√≥ items
    if (items.length === 0) {
      prevItemsRef.current = [];
      return;
    }

    // X√°c ƒë·ªãnh s·∫£n ph·∫©m m·ªõi (th√™m m·ªõi ho·∫∑c tƒÉng s·ªë l∆∞·ª£ng)
    const newProducts = items.filter(newItem => 
      !prevItemsRef.current.some(oldItem => 
        oldItem.product._id === newItem.product._id
      )
    );

    // X√°c ƒë·ªãnh s·∫£n ph·∫©m c√≥ s·ªë l∆∞·ª£ng tƒÉng
    const updatedProducts = items.filter(newItem => {
      const oldItem = prevItemsRef.current.find(oldItem => 
        oldItem.product._id === newItem.product._id
      );
      return oldItem && newItem.quantity > oldItem.quantity;
    });

    const totalNewItems = newProducts.length + updatedProducts.length;

    console.log('üõí Cart Analysis:', {
      currentPath: location.pathname,
      user: !!user,
      newProducts: newProducts.length,
      updatedProducts: updatedProducts.length,
      totalNewItems,
      shouldShowBadge: totalNewItems > 0 && prevItemsRef.current.length >= 0
    });

    // Hi·ªÉn th·ªã badge cho c·∫£ s·∫£n ph·∫©m m·ªõi v√† c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
    if (totalNewItems > 0) {
      setBadgeCount(prev => {
        const newCount = prev + totalNewItems;
        console.log(`üõçÔ∏è Badge updated: ${prev} ‚Üí ${newCount}`);
        return newCount;
      });
      
      // Vibration feedback tr√™n mobile
      if ('vibrate' in navigator) {
        navigator.vibrate(100);
      }
    }

    // C·∫≠p nh·∫≠t ref cho l·∫ßn ki·ªÉm tra ti·∫øp theo
    prevItemsRef.current = [...items]; // Clone array ƒë·ªÉ tr√°nh reference issues

  }, [items]); // Ch·ªâ ph·ª• thu·ªôc v√†o items

  // ‚úÖ Kh√¥ng reset badge khi v√†o trang cart - gi·ªØ th√¥ng b√°o lu√¥n hi·ªÉn th·ªã
  // useEffect(() => {
  //   if (location.pathname === '/cart') {
  //     setBadgeCount(0);
  //   }
  // }, [location.pathname]);

  return {
    badgeCount: items.length, // ‚úÖ Hi·ªÉn th·ªã t·ªïng s·ªë items thay v√¨ ch·ªâ items m·ªõi
    hasItems: items.length > 0, // Hi·ªÉn th·ªã badge khi c√≥ s·∫£n ph·∫©m trong gi·ªè
    totalItems: items.length // T·ªïng s·ªë items trong gi·ªè h√†ng
  };
};