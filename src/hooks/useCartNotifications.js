import { useSelector, useDispatch } from 'react-redux';
import { useEffect, useState, useRef } from 'react';
import { useLocation } from 'react-router-dom';
import { fetchCart } from '../features/cart/cartSlice';

export const useCartNotifications = () => {
  const dispatch = useDispatch();
  const { items } = useSelector((state) => state.cart);
  const user = useSelector((state) => state.auth.user);
  const location = useLocation();
  const [badgeCount, setBadgeCount] = useState(0);
  const prevItemsRef = useRef(items);

  useEffect(() => {
    // X√°c ƒë·ªãnh s·∫£n ph·∫©m m·ªõi
    const newProductIds = items
      .filter(newItem => 
        !prevItemsRef.current.some(oldItem => 
          oldItem.product._id === newItem.product._id
        )
      )
      .map(item => item.product._id);

    console.log('üõí Cart Notifications Debug:', {
      currentPath: location.pathname,
      user: !!user,
      prevItems: prevItemsRef.current.map(item => ({
        productId: item.product._id,
        quantity: item.quantity
      })),
      currentItems: items.map(item => ({
        productId: item.product._id,
        quantity: item.quantity
      })),
      newProductIds
    });

    // Ch·ªâ tƒÉng badge khi c√≥ s·∫£n ph·∫©m m·ªõi
    if (newProductIds.length > 0) {
      setBadgeCount(prev => prev + newProductIds.length);
      
      console.log(`üõçÔ∏è Th√™m ${newProductIds.length} s·∫£n ph·∫©m m·ªõi!`);
      
      // Vibration feedback tr√™n mobile
      if ('vibrate' in navigator) {
        navigator.vibrate(100);
      }
    }

    // C·∫≠p nh·∫≠t ref cho l·∫ßn ki·ªÉm tra ti·∫øp theo
    prevItemsRef.current = items;

    // Fetch cart n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu v√† user ƒë√£ ƒëƒÉng nh·∫≠p
    if (user && items.length === 0) {
      dispatch(fetchCart());
    }
  }, [items, location.pathname, user, dispatch]);

  return {
    badgeCount, // S·ªë l∆∞·ª£ng s·∫£n ph·∫©m m·ªõi
    hasItems: items.length > 0, // Hi·ªÉn th·ªã badge khi c√≥ s·∫£n ph·∫©m trong gi·ªè
  };
};
